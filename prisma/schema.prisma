generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id        String      @id @default(uuid())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  address   Json?
  email     String      @unique
  username  String      @unique
  password  String
  fullName  String?
  mobile    String?
  role      UserRole    @default(USER)
  
  // Relations
  cartItems      CartItem[]
  wishlistItems  WishlistItem[]
  orders         Order[]
  reviews        Review[]
}

model Category {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  name        String
  slug        String    @unique
  description String?
  image       String?
  isActive    Boolean   @default(true)
  parentId    String?
  
  // Relations
  parent       Category?  @relation("SubCategories", fields: [parentId], references: [id])
  subCategories Category[] @relation("SubCategories")
  products     Product[]
}

model Product {
  id              String    @id @default(uuid())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  name            String
  slug            String    @unique
  description     String?
  longDescription String?   @db.Text
  price           Int
  originalPrice   Int?
  images          String[]
  brand           String?
  stock           Int       @default(0)
  rating          Float     @default(0)
  reviewCount     Int       @default(0)
  isActive        Boolean   @default(true)
  categoryId      String
  features        String[]
  
  // Relations
  category      Category      @relation(fields: [categoryId], references: [id])
  cartItems     CartItem[]
  wishlistItems WishlistItem[]
  orderItems    OrderItem[]
  reviews       Review[]
}

model CartItem {
  id           String    @id @default(uuid())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  userId       String
  productId    String
  quantity     Int       @default(1)
  selectedColor String?
  selectedSize  String?
  
  // Relations
  user         User      @relation(fields: [userId], references: [id])
  product      Product   @relation(fields: [productId], references: [id])
}

model WishlistItem {
  id           String    @id @default(uuid())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  userId       String
  productId    String
  
  // Relations
  user         User      @relation(fields: [userId], references: [id])
  product      Product   @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

model Order {
  id              String      @id @default(uuid())
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  userId          String
  total           Int
  status          OrderStatus @default(PENDING)
  paymentMethod   String
  shippingAddress Json
  
  // Relations
  user            User        @relation(fields: [userId], references: [id])
  items           OrderItem[]
}

model OrderItem {
  id            String    @id @default(uuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  orderId       String
  productId     String
  productName   String
  productImage  String
  quantity      Int
  price         Int
  selectedColor String?
  selectedSize  String?
  
  // Relations
  order         Order     @relation(fields: [orderId], references: [id])
  product       Product   @relation(fields: [productId], references: [id])
}

model Review {
  id           String    @id @default(uuid())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  userId       String
  productId    String
  rating       Int
  review       String?   @db.Text
  
  // Relations
  user         User      @relation(fields: [userId], references: [id])
  product      Product   @relation(fields: [productId], references: [id])
}

model ContactSubmission {
  id           String    @id @default(uuid())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  name         String
  email        String
  subject      String
  message      String    @db.Text
  isResolved   Boolean   @default(false)
}

model NewsletterSubscriber {
  id           String    @id @default(uuid())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  email        String    @unique
  isActive     Boolean   @default(true)
}