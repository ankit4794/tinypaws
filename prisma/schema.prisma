// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  email          String    @unique
  username       String    @unique
  password       String
  fullName       String?
  mobile         String?
  address        Json?
  role           UserRole  @default(CUSTOMER)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  cart           CartItem[]
  wishlist       WishlistItem[]
  orders         Order[]
  reviews        Review[]
}

enum UserRole {
  ADMIN
  CUSTOMER
}

// Category model with parent-child relationship
model Category {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  slug           String     @unique
  description    String?
  image          String?
  isActive       Boolean    @default(true)
  parentId       String?    @db.ObjectId
  parent         Category?  @relation("SubCategories", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subCategories  Category[] @relation("SubCategories")
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  
  // Relations
  products       Product[]  @relation("CategoryProducts")
}

// Product model
model Product {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  slug             String    @unique
  description      String?
  longDescription  String?
  price            Int       // in paise/cents
  originalPrice    Int?      // in paise/cents
  images           String[]
  categoryId       String    @db.ObjectId
  category         Category  @relation("CategoryProducts", fields: [categoryId], references: [id])
  subcategoryId    String?   @db.ObjectId
  brand            String?
  features         String[]
  rating           Float     @default(0)
  reviewCount      Int       @default(0)
  stock            Int       @default(0)
  isActive         Boolean   @default(true)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  
  // Relations
  cartItems        CartItem[]
  wishlistItems    WishlistItem[]
  orderItems       OrderItem[]
  reviews          Review[]
}

// Cart Item model
model CartItem {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  userId         String    @db.ObjectId
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId      String    @db.ObjectId
  product        Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity       Int       @default(1)
  selectedColor  String?
  selectedSize   String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

// Wishlist Item model
model WishlistItem {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  userId         String    @db.ObjectId
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId      String    @db.ObjectId
  product        Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt      DateTime  @default(now())
}

// Order model
model Order {
  id               String       @id @default(auto()) @map("_id") @db.ObjectId
  userId           String       @db.ObjectId
  user             User         @relation(fields: [userId], references: [id])
  status           OrderStatus  @default(PENDING)
  total            Int
  shippingAddress  Json
  paymentMethod    String
  paymentStatus    PaymentStatus @default(PENDING)
  couponCode       String?
  discount         Int          @default(0)
  deliveryCharge   Int          @default(0)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  
  // Relations
  items            OrderItem[]
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

// Order Item model
model OrderItem {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  orderId        String    @db.ObjectId
  order          Order     @relation(fields: [orderId], references: [id])
  productId      String    @db.ObjectId
  product        Product   @relation(fields: [productId], references: [id])
  productName    String
  productImage   String
  quantity       Int
  price          Int
  selectedColor  String?
  selectedSize   String?
  createdAt      DateTime  @default(now())
}

// Review model
model Review {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  userId         String    @db.ObjectId
  user           User      @relation(fields: [userId], references: [id])
  productId      String    @db.ObjectId
  product        Product   @relation(fields: [productId], references: [id])
  rating         Int
  review         String?
  isVerified     Boolean   @default(false)
  createdAt      DateTime  @default(now())
}

// Contact Form Submission model
model ContactSubmission {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  email            String
  phone            String
  subject          String
  message          String
  preferredContact String
  isResolved       Boolean   @default(false)
  createdAt        DateTime  @default(now())
}

// Newsletter Subscriber model
model NewsletterSubscriber {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  email          String    @unique
  isActive       Boolean   @default(true)
  createdAt      DateTime  @default(now())
}